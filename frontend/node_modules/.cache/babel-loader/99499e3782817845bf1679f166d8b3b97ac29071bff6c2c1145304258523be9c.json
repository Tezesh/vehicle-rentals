{"ast":null,"code":"var _jsxFileName = \"/Users/likhith./vehicle-rentals/frontend/src/components/layout/AdminRoute.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Navigate, useLocation } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AdminRoute = ({\n  children\n}) => {\n  _s();\n  const location = useLocation();\n  const [isAdmin, setIsAdmin] = useState(null);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    const checkAdminStatus = async () => {\n      const token = localStorage.getItem('token');\n      if (!token) {\n        setIsAdmin(false);\n        setLoading(false);\n        return;\n      }\n      try {\n        // Try to decode the token to check role\n        const payload = JSON.parse(atob(token.split('.')[1]));\n\n        // Make API call to verify admin status\n        const response = await fetch('http://localhost:5000/api/users/me', {\n          headers: {\n            'Authorization': `Bearer ${token}`,\n            'Content-Type': 'application/json'\n          }\n        });\n        if (response.ok) {\n          const user = await response.json();\n          setIsAdmin(user.role === 'admin');\n        } else {\n          console.error('Failed to verify admin status:', response.status, response.statusText);\n          setIsAdmin(false);\n          // Clear invalid token\n          if (response.status === 401) {\n            localStorage.removeItem('token');\n          }\n        }\n      } catch (error) {\n        console.error('Error checking admin status:', error);\n        setIsAdmin(false);\n        // Clear potentially corrupted token\n        localStorage.removeItem('token');\n      }\n      setLoading(false);\n    };\n    checkAdminStatus();\n  }, []);\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"d-flex justify-content-center align-items-center\",\n      style: {\n        minHeight: '100vh'\n      },\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"spinner-border text-primary\",\n        role: \"status\",\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"visually-hidden\",\n          children: \"Loading...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this);\n  }\n  if (!isAdmin) {\n    return /*#__PURE__*/_jsxDEV(Navigate, {\n      to: \"/admin/login\",\n      state: {\n        from: location\n      },\n      replace: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 12\n    }, this);\n  }\n  return children;\n};\n_s(AdminRoute, \"MIp3H6bZzQBlSIw6r4sPu8CzEv4=\", false, function () {\n  return [useLocation];\n});\n_c = AdminRoute;\nexport default AdminRoute;\nvar _c;\n$RefreshReg$(_c, \"AdminRoute\");","map":{"version":3,"names":["React","useState","useEffect","Navigate","useLocation","jsxDEV","_jsxDEV","AdminRoute","children","_s","location","isAdmin","setIsAdmin","loading","setLoading","checkAdminStatus","token","localStorage","getItem","payload","JSON","parse","atob","split","response","fetch","headers","ok","user","json","role","console","error","status","statusText","removeItem","className","style","minHeight","fileName","_jsxFileName","lineNumber","columnNumber","to","state","from","replace","_c","$RefreshReg$"],"sources":["/Users/likhith./vehicle-rentals/frontend/src/components/layout/AdminRoute.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Navigate, useLocation } from 'react-router-dom';\n\nconst AdminRoute = ({ children }) => {\n  const location = useLocation();\n  const [isAdmin, setIsAdmin] = useState(null);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    const checkAdminStatus = async () => {\n      const token = localStorage.getItem('token');\n\n      if (!token) {\n        setIsAdmin(false);\n        setLoading(false);\n        return;\n      }\n\n      try {\n        // Try to decode the token to check role\n        const payload = JSON.parse(atob(token.split('.')[1]));\n\n        // Make API call to verify admin status\n        const response = await fetch('http://localhost:5000/api/users/me', {\n          headers: {\n            'Authorization': `Bearer ${token}`,\n            'Content-Type': 'application/json'\n          }\n        });\n\n        if (response.ok) {\n          const user = await response.json();\n          setIsAdmin(user.role === 'admin');\n        } else {\n          console.error('Failed to verify admin status:', response.status, response.statusText);\n          setIsAdmin(false);\n          // Clear invalid token\n          if (response.status === 401) {\n            localStorage.removeItem('token');\n          }\n        }\n      } catch (error) {\n        console.error('Error checking admin status:', error);\n        setIsAdmin(false);\n        // Clear potentially corrupted token\n        localStorage.removeItem('token');\n      }\n\n      setLoading(false);\n    };\n\n    checkAdminStatus();\n  }, []);\n\n  if (loading) {\n    return (\n      <div className=\"d-flex justify-content-center align-items-center\" style={{ minHeight: '100vh' }}>\n        <div className=\"spinner-border text-primary\" role=\"status\">\n          <span className=\"visually-hidden\">Loading...</span>\n        </div>\n      </div>\n    );\n  }\n\n  if (!isAdmin) {\n    return <Navigate to=\"/admin/login\" state={{ from: location }} replace />;\n  }\n\n  return children;\n};\n\nexport default AdminRoute;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}